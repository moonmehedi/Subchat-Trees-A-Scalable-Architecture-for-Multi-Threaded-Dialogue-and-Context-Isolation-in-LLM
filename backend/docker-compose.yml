# Hierarchical Chat Research Backend - Production Docker Compose
#
# This docker-compose.yml sets up the complete research environment
# with all services needed for the hierarchical chat innovations.

version: '3.8'

services:
  # ========================================================================
  # HIERARCHICAL CHAT RESEARCH BACKEND
  # ========================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hierarchical-chat-backend
    restart: unless-stopped
    
    # Research environment configuration
    environment:
      # Core Application
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - API_VERSION=1.0.0
      
      # Database Configuration (Research Data Persistence)
      - DATABASE_URL=postgresql://research_user:${POSTGRES_PASSWORD}@postgres:5432/hierarchical_chat_db
      - USE_SQLITE_FOR_DEV=false
      
      # OpenAI Configuration (Research LLM)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4o-mini
      - OPENAI_TEMPERATURE=0.7
      - OPENAI_MAX_TOKENS=2000
      
      # Vector Store Configuration (Research Innovation #4)
      - CHROMA_PERSIST_DIRECTORY=/app/data/chromadb
      - CHROMA_COLLECTION_NAME=hierarchical_chat_research
      - EMBEDDING_MODEL_NAME=all-MiniLM-L6-v2
      - EMBEDDING_DEVICE=cpu
      
      # Research Parameters (LocalBuffer Innovation #1)
      - DEFAULT_MAX_TURNS=50
      - DEFAULT_EXCLUDE_RECENT=10
      - MAX_CONTEXT_TOKENS=4000
      - MAX_RETRIEVED_DOCS=5
      
      # Frontend Integration
      - FRONTEND_URL=http://localhost:3000
      - ALLOWED_ORIGINS=["http://localhost:3000","http://localhost:3001","http://127.0.0.1:3000"]
      
      # Redis Configuration (Session Management)
      - REDIS_URL=redis://redis:6379/0
      
      # Research Analytics
      - ENABLE_RESEARCH_METRICS=true
      - ENABLE_CONVERSATION_ANALYTICS=true
      - ANALYTICS_EXPORT_PATH=/app/data/analytics
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/hierarchical_chat.log
    
    # Port mapping for API access
    ports:
      - "8000:8000"
    
    # Research data persistence
    volumes:
      - ./data/chromadb:/app/data/chromadb
      - ./data/exports:/app/data/exports
      - ./data/analytics:/app/data/analytics
      - ./data/backups:/app/data/backups
      - ./logs:/app/logs
    
    # Service dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Resource limits for research workloads
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Research backend network
    networks:
      - research-network

  # ========================================================================
  # POSTGRESQL DATABASE (Research Data Persistence)
  # ========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: hierarchical-chat-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=hierarchical_chat_db
      - POSTGRES_USER=research_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    # Database persistence
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./backups:/backups
    
    # PostgreSQL port (internal only)
    ports:
      - "5432:5432"
    
    # Health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U research_user -d hierarchical_chat_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - research-network

  # ========================================================================
  # REDIS (Session Management & Caching)
  # ========================================================================
  redis:
    image: redis:7-alpine
    container_name: hierarchical-chat-redis
    restart: unless-stopped
    
    # Redis configuration for research sessions
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    
    # Redis persistence
    volumes:
      - redis_data:/data
    
    # Redis port (internal only)
    ports:
      - "6379:6379"
    
    # Health check for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    networks:
      - research-network

  # ========================================================================
  # NGINX REVERSE PROXY (Production Deployment)
  # ========================================================================
  nginx:
    image: nginx:alpine
    container_name: hierarchical-chat-nginx
    restart: unless-stopped
    
    # Nginx configuration
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./data/static:/var/www/static
    
    # HTTP/HTTPS ports
    ports:
      - "80:80"
      - "443:443"
    
    depends_on:
      - backend
    
    networks:
      - research-network

  # ========================================================================
  # MONITORING & OBSERVABILITY (Research Analytics)
  # ========================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hierarchical-chat-prometheus
    restart: unless-stopped
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    
    ports:
      - "9090:9090"
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - research-network

  # Grafana for research dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: hierarchical-chat-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    
    ports:
      - "3001:3000"
    
    networks:
      - research-network

# ============================================================================
# PERSISTENT VOLUMES (Research Data Protection)
# ============================================================================
volumes:
  postgres_data:
    driver: local
    name: hierarchical_chat_postgres_data
  
  redis_data:
    driver: local
    name: hierarchical_chat_redis_data
  
  prometheus_data:
    driver: local
    name: hierarchical_chat_prometheus_data
  
  grafana_data:
    driver: local
    name: hierarchical_chat_grafana_data

# ============================================================================
# NETWORKS (Service Communication)
# ============================================================================
networks:
  research-network:
    driver: bridge
    name: hierarchical_chat_network
